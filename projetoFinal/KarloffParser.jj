PARSER_BEGIN(KarloffParser)
import java.io.*;
import java.util.ArrayList;

class DataType {
  String type;

  DataType(String type){
    this.type = type;
  }

  public String toString() {
    return this.type;
  }
}

class Factor {}

class TrueFactor extends Factor {
  String value = "True";

  public String toString() {
    return this.value;
  }
}

class FalseFactor extends Factor {
  String value = "False";

  public String toString() {
    return this.value;
  }
}

class NumberFactor extends Factor {
  String number;

  NumberFactor(String number) {
    this.number = number;
  }

  public String toString() {
    return this.number;
  }
}

class VariableFactor extends Factor{
  String id;

  VariableFactor(String id){
    this.id = id;
  }

  public String toString() {
    return this.id;
  }
}

class FunctionCall extends Factor{
  String id;
  ArrayList<Expression> argList;

  FunctionCall(String id, ArrayList<Expression> argList){
    this.id = id;
    this.argList = argList;
  }

  public String toString() {
    String block = this.id + "(";

    if (!this.argList.isEmpty()) {

      Expression first = this.argList.remove(0);
      block = block.concat(first.toString());

      for (Expression exp : this.argList) {
        block = block.concat("," + exp.toString());
      }

      argList.add(0, first);
    }

    block = block + ")";

    return block;
  }
}

class Operator {
  String operator;

  Operator(String operator){
    this.operator = operator;
  }

  public String toString() {
    switch (this.operator) {
      case "&":
        return "and";
      case "|":
        return "or";
      default:
        return this.operator;
    }
  }
}

class Expression {}

class Operation extends Expression {
  Operator operator;
  Expression leftExp, rightExp;

  Operation(Operator operator, Expression leftExp, Expression rightExp){
    this.operator = operator;
    this.leftExp = leftExp;
    this.rightExp = rightExp;
  }

  public String toString() {
    return this.leftExp.toString() + " " + this.operator.toString() + " " + this.rightExp.toString();
  }
}

class FinalExpression extends Expression {
  Factor factor;

  FinalExpression(Factor factor){
    this.factor = factor;
  }

  public String toString() {
    return this.factor.toString();
  }
}

class Command {
  int indent = 0;

  public void setIndent(int indent){
    this.indent = indent;
  }

  public int getIndent() {
    return indent;
  }

  public String getTabs() {
    String tabs = "";

    for (int i = 0; i < this.indent; i++){
      tabs = tabs.concat("\t");
    }

    return tabs;
  }
}

class Assignment extends Command {
  String id;
}

class AssignmentExp extends Assignment {
  Expression exp;

  AssignmentExp(String id, Expression exp) {
    this.id = id;
    this.exp = exp;
  }

  public String toString() {
    return this.getTabs() + this.id + " = " + this.exp.toString() + "\n";
  }
}

class AssignmentInput extends Assignment {
  AssignmentInput(String id) {
    this.id = id;
  }

  public String toString() {
    return this.getTabs() + this.id + " = int(input())\n";
  }
}

class IfStatement extends Command {
  Expression condition;
  ArrayList<Command> commands;

  IfStatement(Expression condition, ArrayList<Command> commands){
    this.condition = condition;
    this.commands = commands;
  }

  public String toString() {

    String block = this.getTabs() + "if " + this.condition.toString() + ":\n";

    for (Command command : this.commands) {
      command.setIndent(this.getIndent() + 1);
      block = block.concat(command.toString());
    }

    if (!block.endsWith("\n")){
      block = block + "\n";
    }

    return block;
  }
}

class WhileLoop extends Command {
  Expression condition;
  ArrayList<Command> commands;

  WhileLoop(Expression condition, ArrayList<Command> commands){
    this.condition = condition;
    this.commands = commands;
  }

  public String toString() {
    String block = this.getTabs() + "while " + this.condition.toString() + ":\n";

    for (Command command : this.commands) {
      command.setIndent(this.getIndent() + 1);
      block = block.concat(command.toString());
    }

    if (!block.endsWith("\n")){
      block = block + "\n";
    }

    return block;
  }
}

class RepeatUntilLoop extends Command {
  Expression condition;
  ArrayList<Command> commands;

  RepeatUntilLoop(Expression condition, ArrayList<Command> commands){
    this.condition = condition;
    this.commands = commands;
  }

  public String toString() {
    String block = this.getTabs() + "while not " + this.condition.toString() + ":\n";

    for (Command command : this.commands) {
      command.setIndent(this.getIndent() + 1);
      block = block.concat(command.toString());
    }

    if (!block.endsWith("\n")){
      block = block + "\n";
    }

    return block;
  }
}

class ReturnStatement extends Command {
  Expression exp;

  ReturnStatement(Expression exp){
    this.exp = exp;
  }

  public String toString() {
    return this.getTabs() + "return " + this.exp.toString() + "\n";
  }
}

class PrintStatement extends Command {
  Expression exp;

  PrintStatement(Expression exp){
    this.exp = exp;
  }

  public String toString() {
    return this.getTabs() + "print(" + this.exp.toString() + ")\n";
  }
}

class FunctionCallCommand extends Command {
  FunctionCall functionCall;

  FunctionCallCommand(FunctionCall functionCall){
    this.functionCall = functionCall;
  }

  public String toString() {
    return this.getTabs() + this.functionCall.toString() + "\n";
  }
}

class EntryPoint {
  ArrayList<VariableFactor> variables;
  ArrayList<Command> commands;

  EntryPoint(ArrayList<VariableFactor> variables, ArrayList<Command> commands){
    this.variables = variables;
    this.commands = commands;
  }

  public String toString() {
    String block = "#!/usr/bin python3\n\n";
    block = block + "def main() -> None:\n";

    for (Command command : this.commands) {
      command.setIndent(1);
      block = block.concat(command.toString());
    }

    if (!block.endsWith("\n")){
      block = block + "\n";
    }

    return block;
  }
}

class Argument {
  String name;
  DataType type;

  Argument(String name, DataType type){
    this.name = name;
    this.type = type;
  }

  public String toString() {
    return this.name.toString() + ": " + type.toString();
  }
}

class FunctionDefinition {
  String name;
  DataType return_type;
  ArrayList<Argument> arguments;
  ArrayList<VariableFactor> variables;
  ArrayList<Command> commands;

  FunctionDefinition(String name, DataType return_type, ArrayList<Argument> arguments, ArrayList<VariableFactor> variables, ArrayList<Command> commands){
    this.name = name;
    this.return_type = return_type;
    this.arguments = arguments;
    this.variables = variables;
    this.commands = commands;
  }

  public String toString() {
    String block = "def " + this.name + "(";

    if (!this.arguments.isEmpty()) {

      Argument first = this.arguments.remove(0);
      block = block.concat(first.toString());

      for (Argument argument : this.arguments) {
        block = block.concat("," + argument.toString());
      }

      arguments.add(0, first);
    }

    block = block.concat(") -> " + this.return_type.toString() + ":\n");

    for (Command command : this.commands) {
      command.setIndent(1);
      block = block.concat(command.toString());
    }

    if (!block.endsWith("\n")){
      block = block + "\n";
    }

    return block;
  }
}

class KarloffTree {
  EntryPoint entryPoint;
  ArrayList<FunctionDefinition> functions;

  KarloffTree(EntryPoint entryPoint, ArrayList<FunctionDefinition> functions) {
    this.entryPoint = entryPoint;
    this.functions = functions;
  }

  public String toString() {
    String block = entryPoint.toString() + "\n";

    for (FunctionDefinition function : this.functions) {
      block = block.concat(function.toString() + "\n");
    }

    block = block + "if __name__ == \"__main__\":\n\tmain()\n";

    return block;
  }
}

public class KarloffParser {
  public static void main(String args[]) throws Exception {
    FileInputStream fs;
    String filename = "scripts/script.py";

    switch (args.length) {
      case 0:
        throw new Exception("There is no enough params. Template: java KarloffParser <source_filename.kar> <target_filename.py>");
      case 1:
        fs = new FileInputStream(new File(args[0]));
        break;
      case 2:
        fs = new FileInputStream(new File(args[0]));
        filename = new String(args[1]);
        break;
      default:
        throw new Exception("Too much params. Template: java KarloffParser <source_filename.kar> <target_filename.py>");
    }

    KarloffParser parser = new KarloffParser(fs);

    KarloffTree tree = parser.Karloff();

    generateCode(tree, filename);
  }

  public static void generateCode(KarloffTree prog, String filename) throws Exception {
    File file = new File(filename);

    boolean result;

    result = file.createNewFile();

    if(result) {
      System.out.println("file created " + file.getCanonicalPath());
    } else  {
      System.out.println("File already exists at location: " + file.getCanonicalPath());
    }

    FileOutputStream outputStream = new FileOutputStream(file);
    outputStream.write(prog.toString().getBytes());
  }
}

PARSER_END(KarloffParser)

SKIP :
{

  " "
| "\t"
| "\n"
| "\r"

}

TOKEN :
{

  <MAIN: "main">
| <LBRACE: "{">
| <RBRACE: "}">
| <VOID: "void">
| <LPAREN: "(">
| <RPAREN: ")">
| <NEWVAR: "newVar">
| <SEMICOLON: ";">
| <COMMA: ",">
| <INT: "integer">
| <BOOL: "bool">
| <ASSIGN: "=">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <PRINT: "System.output">
| <READINT: "System.readint">
| <TRUE: "true">
| <FALSE: "false">
| <FUNC: "func">

}

TOKEN :
{

  <OP: "+" | "-" | "*"| "/" | "&" | "|" | "<" | ">" | "==">
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*>
| <NUM: (["0"-"9"])+ ( "." (["0"-"9"])+ )? ("E" ("+"|"-")? (["0"-"9"])+)?>

}

// Karloff -> MAIN FUNC?
KarloffTree Karloff () :
{
  EntryPoint entryPoint;
  ArrayList<FunctionDefinition> functions = new ArrayList();
}
{

  entryPoint=MainC() Func(functions) <EOF>
  {return new KarloffTree(entryPoint, functions);}
}

// MainC -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
EntryPoint MainC () :
{
  ArrayList<VariableFactor> variables = new ArrayList();
  ArrayList<Command> commands = new ArrayList();
}
{

  <VOID> <MAIN> <LPAREN> <RPAREN> <LBRACE> VarDecl(variables) SeqComandos(commands) <RBRACE>
  {
    return new EntryPoint(variables, commands);
  }
}

// VarDecl -> VarDecl "newVar" TYPE ID ";"
// | ε
void VarDecl (ArrayList<VariableFactor> variables) :
{
  Token t;
}
{

  (<NEWVAR> DataType() t=<ID> {variables.add(new VariableFactor(t.image));} <SEMICOLON>)*

}

// TYPE -> "integer" | "bool"
DataType DataType() :
{}
{

  <BOOL> {return new DataType("bool");}| <INT> {return new DataType("int");}

}

// SeqComandos -> SeqComandos COMANDO | ε
void SeqComandos (ArrayList<Command> commands) :
{
  Command c;
}
{

  (c=Command() {commands.add(c);} <SEMICOLON>)*

}

// Command -> ID "=" EXP ";"
// | ID "(" LISTAEXP? ")" ";"
// | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
// | "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
// | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")"
// | "return" EXP ";"
// | "System.output" "(" EXP ")" ";"
// | ID "=" "System.readint" "(" ")" ";"
Command Command () :
{
  Token t;
  Command c;
  Expression test;
  Expression exp;
  ArrayList<Command> commands = new ArrayList();
}
{
    t=<ID> c=ComID(t)
    {return c;}
  | <IF> <LPAREN> test=Exp() <RPAREN> <THEN> <LBRACE> SeqComandos(commands) <RBRACE>
    {return new IfStatement(test, commands);}
  | <WHILE> <LPAREN> test=Exp() <RPAREN> <LBRACE> SeqComandos(commands) <RBRACE>
    {return new WhileLoop(test, commands);}
  | <REPEAT> <LBRACE> SeqComandos(commands) <RBRACE> <UNTIL> <LPAREN> test=Exp() <RPAREN>
    {return new RepeatUntilLoop(test, commands);}
  | <RETURN> exp=Exp()
    {return new ReturnStatement(exp);}
  | <PRINT> <LPAREN> exp=Exp() <RPAREN>
    {return new PrintStatement(exp);}

}

Command ComID (Token t) :
{
  Command c;
  ArrayList<Expression> expressionList = new ArrayList();
}
{
    <ASSIGN> c=ComIDAtrib(t)
    {return c;}
  | <LPAREN> ListExp(expressionList) <RPAREN>
    {return new FunctionCallCommand(new FunctionCall(t.image, expressionList));}
}

Command ComIDAtrib (Token t) :
{
  Expression exp;
}
{
    exp=Exp()
    {return new AssignmentExp(t.image, exp);}
  | <READINT> <LPAREN> <RPAREN> {return new AssignmentInput(t.image);}

}

// EXP -> "(" EXP OP EXP ")" | FACTOR
Expression Exp () :
{
  Expression leftExp, rightExp;
  Operator op;
  Factor f;
}
{
    <LPAREN> leftExp=Exp() op=Op() rightExp=Exp() <RPAREN>
    {return new Operation(op, leftExp, rightExp);}
  | f=Factor()
    {return new FinalExpression(f);}
}

// FACTOR -> ID | ID "(" LISTAEXP? ")"
// | NUM |
// "true" | "false"
Factor Factor () :
{
  Token t;
  ArrayList<Expression> expressionList = new ArrayList();
}
{
    t=<ID> [<LPAREN> ListExp(expressionList) <RPAREN>
            {return new FunctionCall(t.image, expressionList);}]
    {return new VariableFactor(t.image);}
  |  t=<NUM>
    {
      return new NumberFactor(t.image);
    }
  | <TRUE> {return new TrueFactor();}
  | <FALSE> {return new FalseFactor();}

}

// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
Operator Op () :
{Token t;}
{

  t=<OP> {return new Operator(t.image);}

}

// ListExp -> Exp | ListExp "," Exp
void ListExp (ArrayList<Expression> expressionList) :
{
  Expression exp;
}
{

    exp=Exp() {expressionList.add(exp);} [ListExpL(expressionList)]

}

void ListExpL (ArrayList<Expression> expressionList) :
{
  Expression exp;
}
{

  <COMMA> exp=Exp() {expressionList.add(exp);} [ListExpL(expressionList)]

}

// FUNC -> FUNC "func" TYPE ID "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "func" TYPE ID "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
void Func (ArrayList<FunctionDefinition> functions) :
{
  DataType return_type;
  Token t;
  ArrayList<Argument> arguments = new ArrayList();
  ArrayList<VariableFactor> variables = new ArrayList();
  ArrayList<Command> commands = new ArrayList();
}
{

  (
    <FUNC> return_type=DataType() t=<ID> <LPAREN> ListArg(arguments) <RPAREN> <LBRACE> VarDecl(variables) SeqComandos(commands) <RBRACE> 
    {functions.add(new FunctionDefinition(t.image, return_type, arguments, variables, commands));}
  )*

}

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id

void ListArg (ArrayList<Argument> arguments) :
{
  DataType type;
  Token t;
}
{

  (type=DataType() t=<ID> {arguments.add(new Argument(t.image, type));} (<COMMA> type=DataType() t=<ID> {arguments.add(new Argument(t.image, type));})*)*

}