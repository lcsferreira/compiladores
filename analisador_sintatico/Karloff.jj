PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String[] args) throws ParseException,IOException {

    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();
  }
}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRGULA: ";">
| <ATRIB: "=">
| <NVAR: "newVar">
| <NINT: "newInt">
| <SOUT: "System.output">
| <INT: "integer">
| <BOOLEAN: "boolean">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SREAD: "System.readint">
| <FUNC: "func">
| <VIRGULA: ",">
| <IGUALA: "==">
| <MENOR: "<">
| <MAIOR: ">">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">

}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
 |< BOOLVALUE: "true" | "false">
}

//KARLOFF -> MAIN FUNC?
void Karloff() :
{}
{
  Main() (Func())*
}

//MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
void Main() :
{}
{
  <VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
}

//VARDECL -> VARDECL "newVar" TIPO TOKEN_id ";" | vazio
void VarDecl() :
{}
{
  (<NVAR> Tipo() <ID> <PONTOVIRGULA>)*
}

//TIPO -> "integer" | "bool"
void Tipo() :
{}
{
  <INT> | <BOOLEAN>
}

//SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos() :
{}
{
  (Comando())*
}

//COMANDO -> TOKEN_id "=" EXP ";"
//| TOKEN_id "(" LISTAEXP? ")" ";"
//| "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
//| "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//| "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")" ";"
//| "return" EXP ";"
//| "System.output" "(" EXP ")" ";"
//| TOKEN_id "=" "System.readint" "(" ")" ";"
void Comando() :
{}
{
  <ID> ComandoL()
  | <IF> <APARENTESES> Exp() <FPARENTESES> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
  | <WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
  | <REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENTESES> Exp() <FPARENTESES> <PONTOVIRGULA>
  | <RETURN> Exp() <PONTOVIRGULA>
  | <SOUT> <APARENTESES> Exp() <FPARENTESES> <PONTOVIRGULA>
}

void ComandoAtribLinha():
{}
{
  Exp() <PONTOVIRGULA>
  |<SREAD> <APARENTESES> <FPARENTESES> <PONTOVIRGULA>
}

void ComandoL() :
{}
{
  <ATRIB> ComandoAtribLinha()
  |<APARENTESES> (ListaExp())? <FPARENTESES> <PONTOVIRGULA>
}

//EXP -> "(" EXP OP EXP ")" | FATOR
void Exp() :
{}
{
  <APARENTESES> Exp() Op() Exp() <FPARENTESES>
  | Fator()
}

//FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
//| TOKEN_numliteral | "true" | "false"
void Fator() :
{}
{
  <ID> (<APARENTESES> (ListaExp())? <FPARENTESES>)?
  | <NUM>
  | <BOOLEAN>
}

//OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
void Op() :
{}
{
  <SOMA> | <SUB> | <MULT> | <DIV> | <AND> | <OR> | <MENOR> | <MAIOR> | <IGUALA>
}

//LISTAEXP -> EXP | LISTAEXP "," EXP
void ListaExp() :
{}
{
  Exp() (<VIRGULA> Exp())*
}

//FUNC -> FUNC "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
//| "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
void Func() :
{}
{
  (<FUNC> Tipo() <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)
}

//LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
void ListaArg() :
{}
{
  Tipo() <ID> | <VIRGULA> Tipo() <ID>
}